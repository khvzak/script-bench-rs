fn swap(arr, i, j) {
    let t = arr[i];
    arr[i] = arr[j];
    arr[j] = t;
}

fn partition(arr, lo, hi) {
    let pivot_idx = (hi + lo) / 2;
    let pivot = arr[pivot_idx];
    swap(arr, pivot_idx, hi);
    let j = lo;
    for i in lo..hi {
        if arr[i].lt(pivot) {
            swap(arr, i, j);
            j = j + 1;
        }
    }
    swap(arr, j, hi);
    j
}

fn quicksort(arr, lo, hi) {
    while lo < hi {
        let p = partition(arr, lo, hi);
        quicksort(arr, lo, p - 1);
        // Tail recursion
        lo = p + 1;
    }
}

pub fn main() {
    let charset = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    let generate_string = |len| {
        let data = Vec::with_capacity(len);
        for i in 0..len {
            data.push(charset[rand(charset.len())]);
        }
        concat(data)
    };

    let bench = || {
        let array = Vec::new();
        for i in 0..10000 {
            array.push(RustData::new(generate_string(8 + rand(16))));
        }
        quicksort(array, 0, array.len() - 1);
        array
    };

    bench
}
