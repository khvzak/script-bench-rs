fn generate_string(len: i64, charset: String) -> String {
    let result = "";
    let i = 0;
    while i < len {
        result = result.append(string_get(charset, rand(string_len(charset))));
        i = i + 1;
    }

    result
}

fn swap(arr: List, i: i64, j: i64) {
    let t = arr.get(i);
    arr.set(i, arr.get(j));
    arr.set(j, t);
}

fn partition(arr: List, lo: i64, hi: i64) -> i64 {
    let pivot_idx = (lo + hi) / 2;
    let pivot = arr.get(pivot_idx);
    swap(arr, pivot_idx, hi);
    let j = lo;
    while lo < hi {
        if arr.get(lo).lt(pivot) {
            swap(arr, lo, j);
            j = j + 1;
        }
        lo = lo + 1;
    }
    swap(arr, j, hi);
    return j;
}

fn quicksort(arr: List, lo: i64, hi: i64) {
    while lo < hi {
        let p = partition(arr, lo, hi);
        quicksort(arr, lo, p - 1);
        # Tail recursion
        lo = p + 1;
    }
}

fn bench() -> List {
    let charset = "0123456789abcdef";

    let list = List.new();
    let i = 0;
    while i < 10000 {
        list.push(RustData.new(generate_string(8 + rand(16), charset)));
        i = i + 1;
    }
    quicksort(list, 0, list.len() - 1);

    list
}
